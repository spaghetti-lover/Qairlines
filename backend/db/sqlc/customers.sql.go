// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: customers.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (
    user_id,
    phone_number,
    gender,
    date_of_birth,
    passport_number,
    identification_number,
    address,
    loyalty_points
  )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING user_id, phone_number, gender, date_of_birth, passport_number, identification_number, address, loyalty_points
`

type CreateCustomerParams struct {
	UserID               int64       `json:"user_id"`
	PhoneNumber          pgtype.Text `json:"phone_number"`
	Gender               GenderType  `json:"gender"`
	DateOfBirth          time.Time   `json:"date_of_birth"`
	PassportNumber       pgtype.Text `json:"passport_number"`
	IdentificationNumber pgtype.Text `json:"identification_number"`
	Address              pgtype.Text `json:"address"`
	LoyaltyPoints        pgtype.Int4 `json:"loyalty_points"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createCustomer,
		arg.UserID,
		arg.PhoneNumber,
		arg.Gender,
		arg.DateOfBirth,
		arg.PassportNumber,
		arg.IdentificationNumber,
		arg.Address,
		arg.LoyaltyPoints,
	)
	var i Customer
	err := row.Scan(
		&i.UserID,
		&i.PhoneNumber,
		&i.Gender,
		&i.DateOfBirth,
		&i.PassportNumber,
		&i.IdentificationNumber,
		&i.Address,
		&i.LoyaltyPoints,
	)
	return i, err
}

const deleteCustomerByID = `-- name: DeleteCustomerByID :one
DELETE FROM Customers
WHERE user_id = $1
RETURNING user_id
`

func (q *Queries) DeleteCustomerByID(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRow(ctx, deleteCustomerByID, userID)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const getCustomer = `-- name: GetCustomer :one
SELECT user_id, phone_number, gender, date_of_birth, passport_number, identification_number, address, loyalty_points
FROM customers
WHERE user_id = $1
LIMIT 1
`

func (q *Queries) GetCustomer(ctx context.Context, userID int64) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomer, userID)
	var i Customer
	err := row.Scan(
		&i.UserID,
		&i.PhoneNumber,
		&i.Gender,
		&i.DateOfBirth,
		&i.PassportNumber,
		&i.IdentificationNumber,
		&i.Address,
		&i.LoyaltyPoints,
	)
	return i, err
}

const getCustomerByEmail = `-- name: GetCustomerByEmail :one
SELECT c.user_id, c.phone_number, c.gender, c.date_of_birth, c.passport_number, c.identification_number, c.address, c.loyalty_points
FROM customers c
  JOIN users u ON c.user_id = u.user_id
WHERE u.email = $1
LIMIT 1
`

func (q *Queries) GetCustomerByEmail(ctx context.Context, email string) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByEmail, email)
	var i Customer
	err := row.Scan(
		&i.UserID,
		&i.PhoneNumber,
		&i.Gender,
		&i.DateOfBirth,
		&i.PassportNumber,
		&i.IdentificationNumber,
		&i.Address,
		&i.LoyaltyPoints,
	)
	return i, err
}

const getCustomerByID = `-- name: GetCustomerByID :one
SELECT u.user_id AS uid,
  u.first_name,
  u.last_name,
  u.email,
  c.phone_number,
  c.date_of_birth,
  c.gender,
  c.identification_number,
  c.passport_number,
  c.address,
  c.loyalty_points
FROM Users u
  JOIN Customers c ON u.user_id = c.user_id
WHERE u.user_id = $1
`

type GetCustomerByIDRow struct {
	Uid                  int64       `json:"uid"`
	FirstName            pgtype.Text `json:"first_name"`
	LastName             pgtype.Text `json:"last_name"`
	Email                string      `json:"email"`
	PhoneNumber          pgtype.Text `json:"phone_number"`
	DateOfBirth          time.Time   `json:"date_of_birth"`
	Gender               GenderType  `json:"gender"`
	IdentificationNumber pgtype.Text `json:"identification_number"`
	PassportNumber       pgtype.Text `json:"passport_number"`
	Address              pgtype.Text `json:"address"`
	LoyaltyPoints        pgtype.Int4 `json:"loyalty_points"`
}

func (q *Queries) GetCustomerByID(ctx context.Context, userID int64) (GetCustomerByIDRow, error) {
	row := q.db.QueryRow(ctx, getCustomerByID, userID)
	var i GetCustomerByIDRow
	err := row.Scan(
		&i.Uid,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PhoneNumber,
		&i.DateOfBirth,
		&i.Gender,
		&i.IdentificationNumber,
		&i.PassportNumber,
		&i.Address,
		&i.LoyaltyPoints,
	)
	return i, err
}

const listCustomers = `-- name: ListCustomers :many
SELECT user_id, phone_number, gender, date_of_birth, passport_number, identification_number, address, loyalty_points
FROM customers
ORDER BY user_id DESC
LIMIT $1 OFFSET $2
`

type ListCustomersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCustomers(ctx context.Context, arg ListCustomersParams) ([]Customer, error) {
	rows, err := q.db.Query(ctx, listCustomers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.UserID,
			&i.PhoneNumber,
			&i.Gender,
			&i.DateOfBirth,
			&i.PassportNumber,
			&i.IdentificationNumber,
			&i.Address,
			&i.LoyaltyPoints,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomer = `-- name: UpdateCustomer :exec
UPDATE customers
SET phone_number = $1,
  gender = $2,
  date_of_birth = $3,
  passport_number = $4,
  identification_number = $5,
  address = $6,
  loyalty_points = $7
WHERE user_id = $8
`

type UpdateCustomerParams struct {
	PhoneNumber          pgtype.Text `json:"phone_number"`
	Gender               GenderType  `json:"gender"`
	DateOfBirth          time.Time   `json:"date_of_birth"`
	PassportNumber       pgtype.Text `json:"passport_number"`
	IdentificationNumber pgtype.Text `json:"identification_number"`
	Address              pgtype.Text `json:"address"`
	LoyaltyPoints        pgtype.Int4 `json:"loyalty_points"`
	UserID               int64       `json:"user_id"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) error {
	_, err := q.db.Exec(ctx, updateCustomer,
		arg.PhoneNumber,
		arg.Gender,
		arg.DateOfBirth,
		arg.PassportNumber,
		arg.IdentificationNumber,
		arg.Address,
		arg.LoyaltyPoints,
		arg.UserID,
	)
	return err
}
