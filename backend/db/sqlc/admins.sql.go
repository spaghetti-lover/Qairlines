// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: admins.sql

package db

import (
	"context"
)

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO admins (user_id)
VALUES ($1)
RETURNING user_id
`

func (q *Queries) CreateAdmin(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRow(ctx, createAdmin, userID)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const deleteAdmin = `-- name: DeleteAdmin :exec
DELETE FROM admins
WHERE user_id = $1
`

func (q *Queries) DeleteAdmin(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, deleteAdmin, userID)
	return err
}

const getAdmin = `-- name: GetAdmin :one
SELECT user_id
FROM admins
WHERE user_id = $1
LIMIT 1
`

func (q *Queries) GetAdmin(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getAdmin, userID)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const getAdminByEmail = `-- name: GetAdminByEmail :one
SELECT 
FROM admins
  JOIN users u ON a.user_id = u.user_id
WHERE u.email = $1
LIMIT 1
`

type GetAdminByEmailRow struct {
}

func (q *Queries) GetAdminByEmail(ctx context.Context, email string) (GetAdminByEmailRow, error) {
	row := q.db.QueryRow(ctx, getAdminByEmail, email)
	var i GetAdminByEmailRow
	err := row.Scan()
	return i, err
}

const isAdmin = `-- name: IsAdmin :one
SELECT EXISTS (
    SELECT 1
    FROM admins
    WHERE user_id = $1
  ) AS is_admin
`

func (q *Queries) IsAdmin(ctx context.Context, userID int64) (bool, error) {
	row := q.db.QueryRow(ctx, isAdmin, userID)
	var is_admin bool
	err := row.Scan(&is_admin)
	return is_admin, err
}

const listAdmins = `-- name: ListAdmins :many
SELECT user_id
FROM admins
ORDER BY user_id
LIMIT $1 OFFSET $2
`

type ListAdminsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAdmins(ctx context.Context, arg ListAdminsParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, listAdmins, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var user_id int64
		if err := rows.Scan(&user_id); err != nil {
			return nil, err
		}
		items = append(items, user_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
