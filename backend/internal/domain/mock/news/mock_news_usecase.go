// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spaghetti-lover/qairlines/internal/domain/usecases/news (interfaces: IGetNewsUseCase,IListNewsUseCase,IDeleteNewsUseCase)
//
// Generated by this command:
//
//	mockgen -package=mocknews -destination=internal/domain/mock/news/mock_news_usecase.go github.com/spaghetti-lover/qairlines/internal/domain/usecases/news IGetNewsUseCase,IListNewsUseCase,IDeleteNewsUseCase
//

// Package mocknews is a generated GoMock package.
package mocknews

import (
	context "context"
	reflect "reflect"

	entities "github.com/spaghetti-lover/qairlines/internal/domain/entities"
	dto "github.com/spaghetti-lover/qairlines/internal/infra/api/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockIGetNewsUseCase is a mock of IGetNewsUseCase interface.
type MockIGetNewsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIGetNewsUseCaseMockRecorder
	isgomock struct{}
}

// MockIGetNewsUseCaseMockRecorder is the mock recorder for MockIGetNewsUseCase.
type MockIGetNewsUseCaseMockRecorder struct {
	mock *MockIGetNewsUseCase
}

// NewMockIGetNewsUseCase creates a new mock instance.
func NewMockIGetNewsUseCase(ctrl *gomock.Controller) *MockIGetNewsUseCase {
	mock := &MockIGetNewsUseCase{ctrl: ctrl}
	mock.recorder = &MockIGetNewsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGetNewsUseCase) EXPECT() *MockIGetNewsUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockIGetNewsUseCase) Execute(ctx context.Context, newsID int64) (*dto.GetNewsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, newsID)
	ret0, _ := ret[0].(*dto.GetNewsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockIGetNewsUseCaseMockRecorder) Execute(ctx, newsID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockIGetNewsUseCase)(nil).Execute), ctx, newsID)
}

// MockIListNewsUseCase is a mock of IListNewsUseCase interface.
type MockIListNewsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIListNewsUseCaseMockRecorder
	isgomock struct{}
}

// MockIListNewsUseCaseMockRecorder is the mock recorder for MockIListNewsUseCase.
type MockIListNewsUseCaseMockRecorder struct {
	mock *MockIListNewsUseCase
}

// NewMockIListNewsUseCase creates a new mock instance.
func NewMockIListNewsUseCase(ctrl *gomock.Controller) *MockIListNewsUseCase {
	mock := &MockIListNewsUseCase{ctrl: ctrl}
	mock.recorder = &MockIListNewsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIListNewsUseCase) EXPECT() *MockIListNewsUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockIListNewsUseCase) Execute(ctx context.Context, page, limit int) ([]entities.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, page, limit)
	ret0, _ := ret[0].([]entities.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockIListNewsUseCaseMockRecorder) Execute(ctx, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockIListNewsUseCase)(nil).Execute), ctx, page, limit)
}

// MockIDeleteNewsUseCase is a mock of IDeleteNewsUseCase interface.
type MockIDeleteNewsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIDeleteNewsUseCaseMockRecorder
	isgomock struct{}
}

// MockIDeleteNewsUseCaseMockRecorder is the mock recorder for MockIDeleteNewsUseCase.
type MockIDeleteNewsUseCaseMockRecorder struct {
	mock *MockIDeleteNewsUseCase
}

// NewMockIDeleteNewsUseCase creates a new mock instance.
func NewMockIDeleteNewsUseCase(ctrl *gomock.Controller) *MockIDeleteNewsUseCase {
	mock := &MockIDeleteNewsUseCase{ctrl: ctrl}
	mock.recorder = &MockIDeleteNewsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDeleteNewsUseCase) EXPECT() *MockIDeleteNewsUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockIDeleteNewsUseCase) Execute(ctx context.Context, newsID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, newsID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockIDeleteNewsUseCaseMockRecorder) Execute(ctx, newsID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockIDeleteNewsUseCase)(nil).Execute), ctx, newsID)
}
