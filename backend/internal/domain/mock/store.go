// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spaghetti-lover/qairlines/db/sqlc (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination internal/domain/mock/store.go github.com/spaghetti-lover/qairlines/db/sqlc Store
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/spaghetti-lover/qairlines/db/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CancelTicket mocks base method.
func (m *MockStore) CancelTicket(ctx context.Context, ticketID int64) (db.CancelTicketRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelTicket", ctx, ticketID)
	ret0, _ := ret[0].(db.CancelTicketRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelTicket indicates an expected call of CancelTicket.
func (mr *MockStoreMockRecorder) CancelTicket(ctx, ticketID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTicket", reflect.TypeOf((*MockStore)(nil).CancelTicket), ctx, ticketID)
}

// CancelTicketTx mocks base method.
func (m *MockStore) CancelTicketTx(ctx context.Context, arg db.CancelTicketTxParams) (db.CancelTicketTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelTicketTx", ctx, arg)
	ret0, _ := ret[0].(db.CancelTicketTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelTicketTx indicates an expected call of CancelTicketTx.
func (mr *MockStoreMockRecorder) CancelTicketTx(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTicketTx", reflect.TypeOf((*MockStore)(nil).CancelTicketTx), ctx, arg)
}

// CheckSeatAvailability mocks base method.
func (m *MockStore) CheckSeatAvailability(ctx context.Context, arg db.CheckSeatAvailabilityParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSeatAvailability", ctx, arg)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSeatAvailability indicates an expected call of CheckSeatAvailability.
func (mr *MockStoreMockRecorder) CheckSeatAvailability(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSeatAvailability", reflect.TypeOf((*MockStore)(nil).CheckSeatAvailability), ctx, arg)
}

// CountOccupiedSeats mocks base method.
func (m *MockStore) CountOccupiedSeats(ctx context.Context, flightID *int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountOccupiedSeats", ctx, flightID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountOccupiedSeats indicates an expected call of CountOccupiedSeats.
func (mr *MockStoreMockRecorder) CountOccupiedSeats(ctx, flightID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountOccupiedSeats", reflect.TypeOf((*MockStore)(nil).CountOccupiedSeats), ctx, flightID)
}

// CreateAdmin mocks base method.
func (m *MockStore) CreateAdmin(ctx context.Context, userID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdmin", ctx, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdmin indicates an expected call of CreateAdmin.
func (mr *MockStoreMockRecorder) CreateAdmin(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdmin", reflect.TypeOf((*MockStore)(nil).CreateAdmin), ctx, userID)
}

// CreateAdminTx mocks base method.
func (m *MockStore) CreateAdminTx(ctx context.Context, arg db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdminTx", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdminTx indicates an expected call of CreateAdminTx.
func (mr *MockStoreMockRecorder) CreateAdminTx(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdminTx", reflect.TypeOf((*MockStore)(nil).CreateAdminTx), ctx, arg)
}

// CreateBooking mocks base method.
func (m *MockStore) CreateBooking(ctx context.Context, arg db.CreateBookingParams) (db.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBooking", ctx, arg)
	ret0, _ := ret[0].(db.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBooking indicates an expected call of CreateBooking.
func (mr *MockStoreMockRecorder) CreateBooking(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBooking", reflect.TypeOf((*MockStore)(nil).CreateBooking), ctx, arg)
}

// CreateBookingTx mocks base method.
func (m *MockStore) CreateBookingTx(ctx context.Context, arg db.CreateBookingTxParams) (db.CreateBookingTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBookingTx", ctx, arg)
	ret0, _ := ret[0].(db.CreateBookingTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBookingTx indicates an expected call of CreateBookingTx.
func (mr *MockStoreMockRecorder) CreateBookingTx(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBookingTx", reflect.TypeOf((*MockStore)(nil).CreateBookingTx), ctx, arg)
}

// CreateCustomer mocks base method.
func (m *MockStore) CreateCustomer(ctx context.Context, arg db.CreateCustomerParams) (db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", ctx, arg)
	ret0, _ := ret[0].(db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockStoreMockRecorder) CreateCustomer(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockStore)(nil).CreateCustomer), ctx, arg)
}

// CreateCustomerTx mocks base method.
func (m *MockStore) CreateCustomerTx(ctx context.Context, arg db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomerTx", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomerTx indicates an expected call of CreateCustomerTx.
func (mr *MockStoreMockRecorder) CreateCustomerTx(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomerTx", reflect.TypeOf((*MockStore)(nil).CreateCustomerTx), ctx, arg)
}

// CreateFlight mocks base method.
func (m *MockStore) CreateFlight(ctx context.Context, arg db.CreateFlightParams) (db.Flight, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlight", ctx, arg)
	ret0, _ := ret[0].(db.Flight)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFlight indicates an expected call of CreateFlight.
func (mr *MockStoreMockRecorder) CreateFlight(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlight", reflect.TypeOf((*MockStore)(nil).CreateFlight), ctx, arg)
}

// CreateNews mocks base method.
func (m *MockStore) CreateNews(ctx context.Context, arg db.CreateNewsParams) (db.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNews", ctx, arg)
	ret0, _ := ret[0].(db.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNews indicates an expected call of CreateNews.
func (mr *MockStoreMockRecorder) CreateNews(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNews", reflect.TypeOf((*MockStore)(nil).CreateNews), ctx, arg)
}

// CreateSeat mocks base method.
func (m *MockStore) CreateSeat(ctx context.Context, arg db.CreateSeatParams) (db.Seat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSeat", ctx, arg)
	ret0, _ := ret[0].(db.Seat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSeat indicates an expected call of CreateSeat.
func (mr *MockStoreMockRecorder) CreateSeat(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSeat", reflect.TypeOf((*MockStore)(nil).CreateSeat), ctx, arg)
}

// CreateTicket mocks base method.
func (m *MockStore) CreateTicket(ctx context.Context, arg db.CreateTicketParams) (db.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicket", ctx, arg)
	ret0, _ := ret[0].(db.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTicket indicates an expected call of CreateTicket.
func (mr *MockStoreMockRecorder) CreateTicket(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicket", reflect.TypeOf((*MockStore)(nil).CreateTicket), ctx, arg)
}

// CreateTicketOwnerSnapshot mocks base method.
func (m *MockStore) CreateTicketOwnerSnapshot(ctx context.Context, arg db.CreateTicketOwnerSnapshotParams) (db.Ticketownersnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicketOwnerSnapshot", ctx, arg)
	ret0, _ := ret[0].(db.Ticketownersnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTicketOwnerSnapshot indicates an expected call of CreateTicketOwnerSnapshot.
func (mr *MockStoreMockRecorder) CreateTicketOwnerSnapshot(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicketOwnerSnapshot", reflect.TypeOf((*MockStore)(nil).CreateTicketOwnerSnapshot), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(ctx context.Context, arg db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), ctx, arg)
}

// DeactivateUser mocks base method.
func (m *MockStore) DeactivateUser(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateUser indicates an expected call of DeactivateUser.
func (mr *MockStoreMockRecorder) DeactivateUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateUser", reflect.TypeOf((*MockStore)(nil).DeactivateUser), ctx, userID)
}

// DeleteAdmin mocks base method.
func (m *MockStore) DeleteAdmin(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdmin", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAdmin indicates an expected call of DeleteAdmin.
func (mr *MockStoreMockRecorder) DeleteAdmin(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdmin", reflect.TypeOf((*MockStore)(nil).DeleteAdmin), ctx, userID)
}

// DeleteAdminTx mocks base method.
func (m *MockStore) DeleteAdminTx(ctx context.Context, arg db.DeleteAdminTxParams) (db.DeleteAdminTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdminTx", ctx, arg)
	ret0, _ := ret[0].(db.DeleteAdminTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAdminTx indicates an expected call of DeleteAdminTx.
func (mr *MockStoreMockRecorder) DeleteAdminTx(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdminTx", reflect.TypeOf((*MockStore)(nil).DeleteAdminTx), ctx, arg)
}

// DeleteBookings mocks base method.
func (m *MockStore) DeleteBookings(ctx context.Context, bookingID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBookings", ctx, bookingID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBookings indicates an expected call of DeleteBookings.
func (mr *MockStoreMockRecorder) DeleteBookings(ctx, bookingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookings", reflect.TypeOf((*MockStore)(nil).DeleteBookings), ctx, bookingID)
}

// DeleteCustomerByID mocks base method.
func (m *MockStore) DeleteCustomerByID(ctx context.Context, userID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomerByID", ctx, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomerByID indicates an expected call of DeleteCustomerByID.
func (mr *MockStoreMockRecorder) DeleteCustomerByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomerByID", reflect.TypeOf((*MockStore)(nil).DeleteCustomerByID), ctx, userID)
}

// DeleteFlight mocks base method.
func (m *MockStore) DeleteFlight(ctx context.Context, flightID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFlight", ctx, flightID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFlight indicates an expected call of DeleteFlight.
func (mr *MockStoreMockRecorder) DeleteFlight(ctx, flightID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlight", reflect.TypeOf((*MockStore)(nil).DeleteFlight), ctx, flightID)
}

// DeleteNews mocks base method.
func (m *MockStore) DeleteNews(ctx context.Context, id int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNews", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNews indicates an expected call of DeleteNews.
func (mr *MockStoreMockRecorder) DeleteNews(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNews", reflect.TypeOf((*MockStore)(nil).DeleteNews), ctx, id)
}

// DeleteTicket mocks base method.
func (m *MockStore) DeleteTicket(ctx context.Context, ticketID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTicket", ctx, ticketID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTicket indicates an expected call of DeleteTicket.
func (mr *MockStoreMockRecorder) DeleteTicket(ctx, ticketID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTicket", reflect.TypeOf((*MockStore)(nil).DeleteTicket), ctx, ticketID)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), ctx, userID)
}

// GetAdmin mocks base method.
func (m *MockStore) GetAdmin(ctx context.Context, userID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdmin", ctx, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdmin indicates an expected call of GetAdmin.
func (mr *MockStoreMockRecorder) GetAdmin(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdmin", reflect.TypeOf((*MockStore)(nil).GetAdmin), ctx, userID)
}

// GetAdminByEmail mocks base method.
func (m *MockStore) GetAdminByEmail(ctx context.Context, email string) (db.GetAdminByEmailRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminByEmail", ctx, email)
	ret0, _ := ret[0].(db.GetAdminByEmailRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminByEmail indicates an expected call of GetAdminByEmail.
func (mr *MockStoreMockRecorder) GetAdminByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminByEmail", reflect.TypeOf((*MockStore)(nil).GetAdminByEmail), ctx, email)
}

// GetAllFlights mocks base method.
func (m *MockStore) GetAllFlights(ctx context.Context) ([]db.GetAllFlightsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFlights", ctx)
	ret0, _ := ret[0].([]db.GetAllFlightsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFlights indicates an expected call of GetAllFlights.
func (mr *MockStoreMockRecorder) GetAllFlights(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFlights", reflect.TypeOf((*MockStore)(nil).GetAllFlights), ctx)
}

// GetAllSeats mocks base method.
func (m *MockStore) GetAllSeats(ctx context.Context) ([]db.Seat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSeats", ctx)
	ret0, _ := ret[0].([]db.Seat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSeats indicates an expected call of GetAllSeats.
func (mr *MockStoreMockRecorder) GetAllSeats(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSeats", reflect.TypeOf((*MockStore)(nil).GetAllSeats), ctx)
}

// GetAllTicketOwnerSnapshots mocks base method.
func (m *MockStore) GetAllTicketOwnerSnapshots(ctx context.Context) ([]db.Ticketownersnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTicketOwnerSnapshots", ctx)
	ret0, _ := ret[0].([]db.Ticketownersnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTicketOwnerSnapshots indicates an expected call of GetAllTicketOwnerSnapshots.
func (mr *MockStoreMockRecorder) GetAllTicketOwnerSnapshots(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTicketOwnerSnapshots", reflect.TypeOf((*MockStore)(nil).GetAllTicketOwnerSnapshots), ctx)
}

// GetAllUser mocks base method.
func (m *MockStore) GetAllUser(ctx context.Context) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUser", ctx)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUser indicates an expected call of GetAllUser.
func (mr *MockStoreMockRecorder) GetAllUser(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUser", reflect.TypeOf((*MockStore)(nil).GetAllUser), ctx)
}

// GetBooking mocks base method.
func (m *MockStore) GetBooking(ctx context.Context, bookingID int64) (db.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooking", ctx, bookingID)
	ret0, _ := ret[0].(db.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooking indicates an expected call of GetBooking.
func (mr *MockStoreMockRecorder) GetBooking(ctx, bookingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooking", reflect.TypeOf((*MockStore)(nil).GetBooking), ctx, bookingID)
}

// GetBookingHistoryByUID mocks base method.
func (m *MockStore) GetBookingHistoryByUID(ctx context.Context, userID int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookingHistoryByUID", ctx, userID)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookingHistoryByUID indicates an expected call of GetBookingHistoryByUID.
func (mr *MockStoreMockRecorder) GetBookingHistoryByUID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookingHistoryByUID", reflect.TypeOf((*MockStore)(nil).GetBookingHistoryByUID), ctx, userID)
}

// GetCustomer mocks base method.
func (m *MockStore) GetCustomer(ctx context.Context, userID int64) (db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomer", ctx, userID)
	ret0, _ := ret[0].(db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomer indicates an expected call of GetCustomer.
func (mr *MockStoreMockRecorder) GetCustomer(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomer", reflect.TypeOf((*MockStore)(nil).GetCustomer), ctx, userID)
}

// GetCustomerByEmail mocks base method.
func (m *MockStore) GetCustomerByEmail(ctx context.Context, email string) (db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByEmail", ctx, email)
	ret0, _ := ret[0].(db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByEmail indicates an expected call of GetCustomerByEmail.
func (mr *MockStoreMockRecorder) GetCustomerByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByEmail", reflect.TypeOf((*MockStore)(nil).GetCustomerByEmail), ctx, email)
}

// GetCustomerByID mocks base method.
func (m *MockStore) GetCustomerByID(ctx context.Context, userID int64) (db.GetCustomerByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByID", ctx, userID)
	ret0, _ := ret[0].(db.GetCustomerByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByID indicates an expected call of GetCustomerByID.
func (mr *MockStoreMockRecorder) GetCustomerByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByID", reflect.TypeOf((*MockStore)(nil).GetCustomerByID), ctx, userID)
}

// GetFlight mocks base method.
func (m *MockStore) GetFlight(ctx context.Context, flightID int64) (db.Flight, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlight", ctx, flightID)
	ret0, _ := ret[0].(db.Flight)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlight indicates an expected call of GetFlight.
func (mr *MockStoreMockRecorder) GetFlight(ctx, flightID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlight", reflect.TypeOf((*MockStore)(nil).GetFlight), ctx, flightID)
}

// GetFlightsByStatus mocks base method.
func (m *MockStore) GetFlightsByStatus(ctx context.Context, flightID int64) (db.FlightStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlightsByStatus", ctx, flightID)
	ret0, _ := ret[0].(db.FlightStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlightsByStatus indicates an expected call of GetFlightsByStatus.
func (mr *MockStoreMockRecorder) GetFlightsByStatus(ctx, flightID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlightsByStatus", reflect.TypeOf((*MockStore)(nil).GetFlightsByStatus), ctx, flightID)
}

// GetNews mocks base method.
func (m *MockStore) GetNews(ctx context.Context, id int64) (db.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNews", ctx, id)
	ret0, _ := ret[0].(db.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNews indicates an expected call of GetNews.
func (mr *MockStoreMockRecorder) GetNews(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNews", reflect.TypeOf((*MockStore)(nil).GetNews), ctx, id)
}

// GetSeat mocks base method.
func (m *MockStore) GetSeat(ctx context.Context, seatID int64) (db.Seat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeat", ctx, seatID)
	ret0, _ := ret[0].(db.Seat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeat indicates an expected call of GetSeat.
func (mr *MockStoreMockRecorder) GetSeat(ctx, seatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeat", reflect.TypeOf((*MockStore)(nil).GetSeat), ctx, seatID)
}

// GetSeatByTicketID mocks base method.
func (m *MockStore) GetSeatByTicketID(ctx context.Context, ticketID int64) (db.GetSeatByTicketIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeatByTicketID", ctx, ticketID)
	ret0, _ := ret[0].(db.GetSeatByTicketIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeatByTicketID indicates an expected call of GetSeatByTicketID.
func (mr *MockStoreMockRecorder) GetSeatByTicketID(ctx, ticketID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeatByTicketID", reflect.TypeOf((*MockStore)(nil).GetSeatByTicketID), ctx, ticketID)
}

// GetTicketByFlightId mocks base method.
func (m *MockStore) GetTicketByFlightId(ctx context.Context, flightID int64) ([]db.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketByFlightId", ctx, flightID)
	ret0, _ := ret[0].([]db.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketByFlightId indicates an expected call of GetTicketByFlightId.
func (mr *MockStoreMockRecorder) GetTicketByFlightId(ctx, flightID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketByFlightId", reflect.TypeOf((*MockStore)(nil).GetTicketByFlightId), ctx, flightID)
}

// GetTicketByID mocks base method.
func (m *MockStore) GetTicketByID(ctx context.Context, ticketID int64) (db.GetTicketByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketByID", ctx, ticketID)
	ret0, _ := ret[0].(db.GetTicketByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketByID indicates an expected call of GetTicketByID.
func (mr *MockStoreMockRecorder) GetTicketByID(ctx, ticketID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketByID", reflect.TypeOf((*MockStore)(nil).GetTicketByID), ctx, ticketID)
}

// GetTicketOwnerSnapshot mocks base method.
func (m *MockStore) GetTicketOwnerSnapshot(ctx context.Context, ticketID int64) (db.Ticketownersnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketOwnerSnapshot", ctx, ticketID)
	ret0, _ := ret[0].(db.Ticketownersnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketOwnerSnapshot indicates an expected call of GetTicketOwnerSnapshot.
func (mr *MockStoreMockRecorder) GetTicketOwnerSnapshot(ctx, ticketID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketOwnerSnapshot", reflect.TypeOf((*MockStore)(nil).GetTicketOwnerSnapshot), ctx, ticketID)
}

// GetTicketsByBookingIDAndType mocks base method.
func (m *MockStore) GetTicketsByBookingIDAndType(ctx context.Context, arg db.GetTicketsByBookingIDAndTypeParams) ([]db.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketsByBookingIDAndType", ctx, arg)
	ret0, _ := ret[0].([]db.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketsByBookingIDAndType indicates an expected call of GetTicketsByBookingIDAndType.
func (mr *MockStoreMockRecorder) GetTicketsByBookingIDAndType(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketsByBookingIDAndType", reflect.TypeOf((*MockStore)(nil).GetTicketsByBookingIDAndType), ctx, arg)
}

// GetTicketsByFlightID mocks base method.
func (m *MockStore) GetTicketsByFlightID(ctx context.Context, flightID int64) ([]db.GetTicketsByFlightIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketsByFlightID", ctx, flightID)
	ret0, _ := ret[0].([]db.GetTicketsByFlightIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketsByFlightID indicates an expected call of GetTicketsByFlightID.
func (mr *MockStoreMockRecorder) GetTicketsByFlightID(ctx, flightID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketsByFlightID", reflect.TypeOf((*MockStore)(nil).GetTicketsByFlightID), ctx, flightID)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(ctx context.Context, userID int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, userID)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), ctx, userID)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(ctx context.Context, email string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), ctx, email)
}

// IsAdmin mocks base method.
func (m *MockStore) IsAdmin(ctx context.Context, userID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAdmin", ctx, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAdmin indicates an expected call of IsAdmin.
func (mr *MockStoreMockRecorder) IsAdmin(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdmin", reflect.TypeOf((*MockStore)(nil).IsAdmin), ctx, userID)
}

// ListAdmins mocks base method.
func (m *MockStore) ListAdmins(ctx context.Context, arg db.ListAdminsParams) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAdmins", ctx, arg)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAdmins indicates an expected call of ListAdmins.
func (mr *MockStoreMockRecorder) ListAdmins(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAdmins", reflect.TypeOf((*MockStore)(nil).ListAdmins), ctx, arg)
}

// ListBookings mocks base method.
func (m *MockStore) ListBookings(ctx context.Context, arg db.ListBookingsParams) ([]db.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBookings", ctx, arg)
	ret0, _ := ret[0].([]db.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBookings indicates an expected call of ListBookings.
func (mr *MockStoreMockRecorder) ListBookings(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBookings", reflect.TypeOf((*MockStore)(nil).ListBookings), ctx, arg)
}

// ListCustomers mocks base method.
func (m *MockStore) ListCustomers(ctx context.Context, arg db.ListCustomersParams) ([]db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomers", ctx, arg)
	ret0, _ := ret[0].([]db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomers indicates an expected call of ListCustomers.
func (mr *MockStoreMockRecorder) ListCustomers(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomers", reflect.TypeOf((*MockStore)(nil).ListCustomers), ctx, arg)
}

// ListFlights mocks base method.
func (m *MockStore) ListFlights(ctx context.Context, arg db.ListFlightsParams) ([]db.ListFlightsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFlights", ctx, arg)
	ret0, _ := ret[0].([]db.ListFlightsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFlights indicates an expected call of ListFlights.
func (mr *MockStoreMockRecorder) ListFlights(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlights", reflect.TypeOf((*MockStore)(nil).ListFlights), ctx, arg)
}

// ListNews mocks base method.
func (m *MockStore) ListNews(ctx context.Context, arg db.ListNewsParams) ([]db.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNews", ctx, arg)
	ret0, _ := ret[0].([]db.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNews indicates an expected call of ListNews.
func (mr *MockStoreMockRecorder) ListNews(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNews", reflect.TypeOf((*MockStore)(nil).ListNews), ctx, arg)
}

// ListSeatsWithFlightId mocks base method.
func (m *MockStore) ListSeatsWithFlightId(ctx context.Context, flightID *int64) ([]db.Seat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSeatsWithFlightId", ctx, flightID)
	ret0, _ := ret[0].([]db.Seat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSeatsWithFlightId indicates an expected call of ListSeatsWithFlightId.
func (mr *MockStoreMockRecorder) ListSeatsWithFlightId(ctx, flightID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSeatsWithFlightId", reflect.TypeOf((*MockStore)(nil).ListSeatsWithFlightId), ctx, flightID)
}

// ListTicketOwnerSnapshots mocks base method.
func (m *MockStore) ListTicketOwnerSnapshots(ctx context.Context, arg db.ListTicketOwnerSnapshotsParams) ([]db.Ticketownersnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTicketOwnerSnapshots", ctx, arg)
	ret0, _ := ret[0].([]db.Ticketownersnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTicketOwnerSnapshots indicates an expected call of ListTicketOwnerSnapshots.
func (mr *MockStoreMockRecorder) ListTicketOwnerSnapshots(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTicketOwnerSnapshots", reflect.TypeOf((*MockStore)(nil).ListTicketOwnerSnapshots), ctx, arg)
}

// ListTickets mocks base method.
func (m *MockStore) ListTickets(ctx context.Context, arg db.ListTicketsParams) ([]db.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTickets", ctx, arg)
	ret0, _ := ret[0].([]db.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTickets indicates an expected call of ListTickets.
func (mr *MockStoreMockRecorder) ListTickets(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTickets", reflect.TypeOf((*MockStore)(nil).ListTickets), ctx, arg)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(ctx context.Context, arg db.ListUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, arg)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), ctx, arg)
}

// MarkSeatUnavailable mocks base method.
func (m *MockStore) MarkSeatUnavailable(ctx context.Context, arg db.MarkSeatUnavailableParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkSeatUnavailable", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkSeatUnavailable indicates an expected call of MarkSeatUnavailable.
func (mr *MockStoreMockRecorder) MarkSeatUnavailable(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkSeatUnavailable", reflect.TypeOf((*MockStore)(nil).MarkSeatUnavailable), ctx, arg)
}

// RemoveAuthorFromBlogPosts mocks base method.
func (m *MockStore) RemoveAuthorFromBlogPosts(ctx context.Context, authorID *int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAuthorFromBlogPosts", ctx, authorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAuthorFromBlogPosts indicates an expected call of RemoveAuthorFromBlogPosts.
func (mr *MockStoreMockRecorder) RemoveAuthorFromBlogPosts(ctx, authorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAuthorFromBlogPosts", reflect.TypeOf((*MockStore)(nil).RemoveAuthorFromBlogPosts), ctx, authorID)
}

// RemoveUserFromBookings mocks base method.
func (m *MockStore) RemoveUserFromBookings(ctx context.Context, userEmail *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserFromBookings", ctx, userEmail)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserFromBookings indicates an expected call of RemoveUserFromBookings.
func (mr *MockStoreMockRecorder) RemoveUserFromBookings(ctx, userEmail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromBookings", reflect.TypeOf((*MockStore)(nil).RemoveUserFromBookings), ctx, userEmail)
}

// SearchFlights mocks base method.
func (m *MockStore) SearchFlights(ctx context.Context, arg db.SearchFlightsParams) ([]db.SearchFlightsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFlights", ctx, arg)
	ret0, _ := ret[0].([]db.SearchFlightsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFlights indicates an expected call of SearchFlights.
func (mr *MockStoreMockRecorder) SearchFlights(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFlights", reflect.TypeOf((*MockStore)(nil).SearchFlights), ctx, arg)
}

// UpdateCustomer mocks base method.
func (m *MockStore) UpdateCustomer(ctx context.Context, arg db.UpdateCustomerParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomer", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCustomer indicates an expected call of UpdateCustomer.
func (mr *MockStoreMockRecorder) UpdateCustomer(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomer", reflect.TypeOf((*MockStore)(nil).UpdateCustomer), ctx, arg)
}

// UpdateCustomerTx mocks base method.
func (m *MockStore) UpdateCustomerTx(ctx context.Context, arg db.UpdateCustomerTxParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomerTx", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCustomerTx indicates an expected call of UpdateCustomerTx.
func (mr *MockStoreMockRecorder) UpdateCustomerTx(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomerTx", reflect.TypeOf((*MockStore)(nil).UpdateCustomerTx), ctx, arg)
}

// UpdateFlightTimes mocks base method.
func (m *MockStore) UpdateFlightTimes(ctx context.Context, arg db.UpdateFlightTimesParams) (db.UpdateFlightTimesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlightTimes", ctx, arg)
	ret0, _ := ret[0].(db.UpdateFlightTimesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlightTimes indicates an expected call of UpdateFlightTimes.
func (mr *MockStoreMockRecorder) UpdateFlightTimes(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlightTimes", reflect.TypeOf((*MockStore)(nil).UpdateFlightTimes), ctx, arg)
}

// UpdateNews mocks base method.
func (m *MockStore) UpdateNews(ctx context.Context, arg db.UpdateNewsParams) (db.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNews", ctx, arg)
	ret0, _ := ret[0].(db.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNews indicates an expected call of UpdateNews.
func (mr *MockStoreMockRecorder) UpdateNews(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNews", reflect.TypeOf((*MockStore)(nil).UpdateNews), ctx, arg)
}

// UpdateSeat mocks base method.
func (m *MockStore) UpdateSeat(ctx context.Context, arg db.UpdateSeatParams) (db.Seat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSeat", ctx, arg)
	ret0, _ := ret[0].(db.Seat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSeat indicates an expected call of UpdateSeat.
func (mr *MockStoreMockRecorder) UpdateSeat(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSeat", reflect.TypeOf((*MockStore)(nil).UpdateSeat), ctx, arg)
}

// UpdateSeatAvailability mocks base method.
func (m *MockStore) UpdateSeatAvailability(ctx context.Context, arg db.UpdateSeatAvailabilityParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSeatAvailability", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSeatAvailability indicates an expected call of UpdateSeatAvailability.
func (mr *MockStoreMockRecorder) UpdateSeatAvailability(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSeatAvailability", reflect.TypeOf((*MockStore)(nil).UpdateSeatAvailability), ctx, arg)
}

// UpdateSeats mocks base method.
func (m *MockStore) UpdateSeats(ctx context.Context, bookingID int64, seats []db.SeatUpdateParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSeats", ctx, bookingID, seats)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSeats indicates an expected call of UpdateSeats.
func (mr *MockStoreMockRecorder) UpdateSeats(ctx, bookingID, seats any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSeats", reflect.TypeOf((*MockStore)(nil).UpdateSeats), ctx, bookingID, seats)
}

// UpdateTicket mocks base method.
func (m *MockStore) UpdateTicket(ctx context.Context, arg db.UpdateTicketParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTicket", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTicket indicates an expected call of UpdateTicket.
func (mr *MockStoreMockRecorder) UpdateTicket(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTicket", reflect.TypeOf((*MockStore)(nil).UpdateTicket), ctx, arg)
}

// UpdateTicketStatus mocks base method.
func (m *MockStore) UpdateTicketStatus(ctx context.Context, arg db.UpdateTicketStatusParams) (db.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTicketStatus", ctx, arg)
	ret0, _ := ret[0].(db.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTicketStatus indicates an expected call of UpdateTicketStatus.
func (mr *MockStoreMockRecorder) UpdateTicketStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTicketStatus", reflect.TypeOf((*MockStore)(nil).UpdateTicketStatus), ctx, arg)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(ctx context.Context, arg db.UpdateUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), ctx, arg)
}

// UpdateUserPassword mocks base method.
func (m *MockStore) UpdateUserPassword(ctx context.Context, arg db.UpdateUserPasswordParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockStoreMockRecorder) UpdateUserPassword(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockStore)(nil).UpdateUserPassword), ctx, arg)
}
